The compareTo() method compares two strings lexicographically (in the dictionary order). The comparison is based on the Unicode value of each character in the strings.

-----
Syntax of compareTo():  string.compareTo(String str)

-----
compareTo() Return Value:

returns 0 if the strings are equal
returns a negative integer if the string comes before the str argument in the dictionary order
returns a positive integer if the string comes after the str argument in the dictionary order

-----
Example 1 : Java String compareTo()

class Main {
  public static void main(String[] args) {
    String str1 = "Learn Java";
    String str2 = "Learn Java";
    String str3 = "Learn Kolin";
    int result;

    // comparing str1 with str2
    result = str1.compareTo(str2);
    System.out.println(result);  // 0

    // comparing str1 with str3
    result = str1.compareTo(str3);
    System.out.println(result);  // -1

    // comparing str3 with str1
    result = str3.compareTo(str1);
    System.out.println(result);  // 1
  }
}

o/p:
0
-1
1

-----
Example 2: Check if Two Strings are Equal

class Main {
  public static void main(String[] args) {
    String str1 = "Learn Python";
    String str2 = "Learn Java";
        
    // if str1 and str2 are equal, the result is 0
    if (str1.compareTo(str2) == 0) {

      System.out.println("str1 and str2 are equal");
    }
    else {
      System.out.println("str1 and str2 are not equal");
    }
  }
}

o/p:
str1 and str2 are not equal

-----
Example 3: compareTo() With Case

class Main {
  public static void main(String[] args) {
    String str1 = "Learn Java";
    String str2 = "learn Java";
    int result;

    // comparing str1 with str2
    result = str1.compareTo(str2);
    System.out.println(result);  // -32
  }
}

o/p:
-32




